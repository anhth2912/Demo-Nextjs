import type { NextPage } from 'next';
import Head from 'next/head';
import { initializeApollo } from '../lib/apollo';
import styles from '../styles/Home.module.css';
import {
  GET_ALL_AUTHOR,
  GET_ALL_BOOK,
  GET_AUTHOR,
  GET_BOOK,
} from '../graphql-client/queries/createQueries';
import { Formik, Form } from 'formik';
import {
  FormControl,
  FormHelperText,
  Button,
  TextField,
  Select,
  MenuItem,
  InputLabel,
} from '@mui/material';
//import GET_ALL_AUTHOR from '../graphql-client/queries/getAllAuthor.graphql';
import { useQuery, useMutation } from '@apollo/client';

interface CreateBookForm {
  title: String;
  author: String;
  genre: String;
}

interface Author {
  id: String;
  name: String;
  age: Number;
}

interface ListAuthor {
  authors: Author[];
}

interface AutocompleteOption {
  id: String;
  name: String;
  title: String;
}

const Home: NextPage = (props) => {
  const { data, loading } = useQuery<ListAuthor>(GET_ALL_AUTHOR);
  if (loading) return <p>Loading...</p>;
  console.log(data);

  const initialValues: CreateBookForm = { title: '', genre: '', author: '' };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="w-100 h-100 bg-red">
        <h1 className={styles.title}>Create Book</h1>
        <Formik
          initialValues={initialValues}
          onSubmit={(values) => {
            console.log(values);
          }}
        >
          {({ values, handleChange }) => {
            return (
              <Form>
                <FormControl>
                  <TextField
                    id="title"
                    onChange={handleChange}
                    value={values.title}
                    label="Standard"
                    variant="standard"
                  />
                  <FormHelperText id="helper-title">Enter title of Book</FormHelperText>
                  <TextField
                    id="genre"
                    onChange={handleChange}
                    value={values.genre}
                    label="Standard"
                    variant="standard"
                  />
                  <FormHelperText id="helper-genre">Enter genre of Book</FormHelperText>
                  <Select
                    labelId="demo-simple-select-label"
                    id="author"
                    value={values.author}
                    label="Author"
                    onChange={handleChange}
                    name="Author"
                  >
                    {data?.authors.map((author: { id: String; name: String; age: Number }) => (
                      <MenuItem key={author.id} value={author.id}>
                        {author.name}
                      </MenuItem>
                    ))}
                  </Select>
                  <Button type="submit">Submit</Button>
                </FormControl>
              </Form>
            );
          }}
        </Formik>

        <div></div>
      </main>
    </div>
  );
};

export async function getStaticProps() {
  const apolloClient = initializeApollo();

  return {
    props: {
      initialApolloState: apolloClient.cache.extract(),
    },
  };
}

export default Home;
